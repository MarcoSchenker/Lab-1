Plan de Implementación Unificado: Juego de Truco Multijugador en Backend 

Objetivo Principal 

Trasladar la lógica del juego del frontend al backend para permitir partidas multijugador (1v1, 2v2, 3v3) con persistencia de estado, utilizando el sistema de salas actual para iniciar las partidas, e incorporando reglas específicas como "Envido Primero" y la opción "Son Buenas" en la resolución del Envido. 

Fase 1: Diseño y Preparación del Backend 

Definición del Modelo de Datos del Juego en Backend 

Estado General de la Partida (Partida) 

codigo_sala (FK a partidas de salasRoute.js) 
estado_partida (e.g., 'esperando_jugadores', 'en_curso', 'pausada', 'finalizada') 
tipo_partida (e.g., '1v1', '2v2', '3v3') 
jugadores_configurados (número de jugadores esperados: 2, 4, o 6) 
equipos (Array de objetos Equipo) 
jugador_actual_id (FK a usuarios) 
mano_actual_id (FK a usuarios, quién es mano en la ronda) 
puntaje_objetivo (e.g., 15 o 30 puntos) 
historial_rondas (Array de objetos RondaEstado) 
mazo_actual (estado del mazo en la ronda) 
cartas_en_mesa_ronda_actual (Array de objetos Jugada) 
estado_envido_actual: 
cantado_por_equipo_id 
tipo_envido_actual (e.g., 'ENVIDO', 'REAL_ENVIDO', 'FALTA_ENVIDO') 
estado_resolucion (e.g., 'pendiente_respuesta', 'querido_pendiente_puntos', 'resuelto') 
puntos_declarados_equipo1 (opcional, para cuando se cantan) 
puntos_declarados_equipo2 (opcional) 
dijo_son_buenas_equipo_id (opcional, para registrar si un equipo optó por esto) 
estado_truco_actual: 
cantado_por_equipo_id 
tipo_truco_actual (e.g., 'TRUCO', 'RETRUCO', 'VALE_CUATRO') 
estado_resolucion (e.g., 'pendiente_respuesta', 'querido', 'resuelto') 
truco_pendiente_por_envido_primero (boolean): Para manejar la interrupción del Truco por un Envido en la primera mano 
orden_juego_ronda (Array de usuario_id indicando el orden de turno para la ronda actual) 
Estado del Equipo (Equipo) 

id_equipo (e.g., 'equipo_1', 'equipo_2') 
jugadores (Array de usuario_id) 
puntos_partida 
Estado del Jugador en Partida (JugadorPartida) 

usuario_id (FK a usuarios) 
cartas_mano_actual (Array de objetos Naipe) 
cartas_jugadas_ronda_actual (Array de objetos Naipe) 
es_pie_equipo (boolean) 
Estado de la Ronda (RondaEstado) 

numero_ronda 
ganador_ronda_equipo_id 
historial_manos_ronda (Array de ManoEnRondaEstado) 
puntos_envido_disputados 
puntos_truco_disputados 
envido_cantado_en_ronda (boolean) 
truco_cantado_en_ronda (boolean) 
Estado de la Mano en Ronda (ManoEnRondaEstado) 

numero_mano_en_ronda (1, 2, o 3) 
jugadas_mano (Array de Jugada) 
ganador_mano_equipo_id 
fue_parda (boolean) 
Jugada (Jugada) 

usuario_id 
naipe (objeto Naipe) 
orden_jugada (en la mano) 
Canto (CantoRealizado) 

tipo_canto ('ENVIDO', 'REAL_ENVIDO', 'FALTA_ENVIDO', 'TRUCO', 'RETRUCO', 'VALE_CUATRO', 'QUIERO', 'NO_QUIERO', 'ME_VOY_AL_MAZO', 'SON_BUENAS_ENVIDO') 
usuario_id_cantor 
equipo_id_cantor 
timestamp 
valor_puntos_declarados (opcional, para cuando se cantan los puntos del envido) 
Modificaciones a la Base de Datos (MySQL - dbInit.js) 

Crear nuevas tablas para almacenar el estado detallado de las partidas: 
partidas_estado (para el estado general de la partida, vinculada a partidas.codigo_sala) 
partidas_equipos (para definir los equipos y sus jugadores en una partida) 
partidas_jugadores_cartas (para las cartas en mano de cada jugador por ronda) 
partidas_rondas_log (para el historial de rondas, manos, jugadas y cantos) 
Ajustar la tabla partidas (de salasRoute.js) para incluir: 
estado_partida (e.g., 'esperando_jugadores', 'en_curso', 'finalizada', 'pausada') 
jugadores_configurados (2, 4, 6) 
tipo_partida ('1v1', '2v2', '3v3') 
Ajustar jugadores_partidas para incluir id_equipo_asignado 
En partidas_estado, añadir columna truco_pendiente_por_envido_primero BOOLEAN DEFAULT FALSE 
En partidas_rondas_log o tabla específica para cantos: 
Asegurar que se pueda registrar el canto "SON_BUENAS_ENVIDO" 
Registrar los puntos efectivamente ganados en el envido y quién los ganó 
Diseño de API Endpoints (Backend - salasRoute.js o gameRoutes.js) 

POST /api/game/:codigo_sala/jugar_carta: { carta: Naipe } 
POST /api/game/:codigo_sala/cantar: { canto: TipoCanto, detalle?: any } 
Si canto es para Envido y estado_truco_actual está activo (y es primera mano), manejar la lógica de "Envido Primero" 
POST /api/game/:codigo_sala/responder_canto: { respuesta: 'QUIERO' | 'NO_QUIERO' | 'CANTO_MAS' | 'SON_BUENAS_ENVIDO', nuevo_canto?: TipoCanto, puntos_envido?: number } 
GET /api/game/:codigo_sala/estado: Para obtener el estado actual del juego 
POST /api/game/:codigo_sala/irse_al_mazo 
Diseño de Comunicación con WebSockets (Backend - server.js) 

Eventos del Servidor al Cliente 

estado_juego_actualizado: Envía el estado completo o parcial del juego a todos los jugadores 
turno_jugador: Indica a quién le toca jugar/cantar 
carta_jugada: Notifica que un jugador jugó una carta 
canto_realizado: Notifica que un jugador cantó algo 
respuesta_canto: Notifica la respuesta a un canto 
solicitud_declarar_puntos_envido: Para solicitar puntos de envido a un jugador/equipo 
envido_resuelto: Detalla quién ganó el envido, puntos y si se usó "son buenas" 
resultado_mano: Notifica el ganador de una mano 
resultado_ronda: Notifica el ganador de la ronda y puntos 
fin_partida: Notifica el ganador de la partida 
error_juego: Para errores específicos del juego 
jugador_desconectado: Notifica si un jugador se desconecta 
jugador_reconectado: Notifica si un jugador se reconecta 
Eventos del Cliente al Servidor 

jugar_carta_ws: { carta: Naipe } 
cantar_ws: { canto: TipoCanto, detalle?: any } 
responder_canto_ws: { respuesta: 'QUIERO' | 'NO_QUIERO' | 'CANTO_MAS' | 'SON_BUENAS_ENVIDO', nuevo_canto?: TipoCanto, puntos_envido?: number } 
irse_al_mazo_ws 
solicitar_estado_juego_ws (para reconexiones) 
Fase 2: Implementación de la Lógica del Juego en Backend 

Estructura de Archivos en Backend 

Crear un directorio game_logic (o similar) en el backend 
Adaptar clases/módulos del frontend eliminando la lógica de IA y manipulación directa del DOM: 
Naipe.js: Definición de la carta 
Mazo.js: Lógica para crear, mezclar y repartir el mazo 
JugadorGame.js: Representa a un jugador en el contexto del juego 
EquipoGame.js: Representa a un equipo 
RondaGame.js: Lógica para manejar una ronda, cantos y manos 
PartidaGame.js: Orquestador principal del juego 
Adaptación de la Lógica Central del Juego 

Inicialización de Partida 

Crear instancia de PartidaGame cuando una sala se llena 
Asignar jugadores a equipos (aleatorio o según orden de entrada) 
Determinar quién es mano para la primera ronda 
Guardar el estado inicial en la base de datos 
Notificar a los clientes que la partida ha comenzado 
Manejo de Turnos 

Implementar rotación de turnos para 2, 4 y 6 jugadores 
Considerar quién es mano para iniciar cada mano 
El ganador de una mano es el primero en jugar la siguiente 
Repartir Cartas 

Lógica para repartir 3 cartas a cada jugador al inicio de cada ronda 
Persistir las cartas de cada jugador 
Jugar Carta 

Validar que es el turno del jugador 
Validar que la carta está en su mano 
Actualizar estado (carta en mesa, quitar de la mano del jugador) 
Determinar si la mano terminó y quién la ganó 
Persistir la jugada y notificar a los clientes 
Manejo de Cantos (Envido y Truco) 

Adaptar la estructura de estados de envido/truco al backend 
Validar la legalidad del canto (quién puede cantar, qué puede cantar) 
Manejar secuencia de cantos y respuestas 
Implementar la regla "Envido Primero": 
Si es primera mano y se canta TRUCO, el otro jugador puede cantar ENVIDO 
Marcar truco_pendiente_por_envido_primero = true 
Procesar toda la secuencia del ENVIDO 
Una vez resuelto, marcar truco_pendiente_por_envido_primero = false 
Volver al TRUCO pendiente para su respuesta 
Implementar la regla "Son Buenas" en Envido: 
Primer equipo declara sus puntos 
El servidor emite solicitud al segundo equipo 
Este puede cantar sus puntos o decir "SON_BUENAS" si son menores 
El servidor determina el ganador y asigna puntos 
Resolver el envido (calcular puntos, determinar ganador) 
Resolver el truco (al final de la ronda o si alguien no quiere) 
Persistir cantos y resultados, notificar a los clientes 
Finalización de Mano/Ronda/Partida 

Lógica para determinar ganador de cada mano 
Lógica para determinar ganador de la ronda 
Sumar puntos al equipo ganador (por truco y/o envido) 
Verificar si un equipo alcanzó el puntaje objetivo 
Actualizar estado en la base de datos y notificar a los clientes 
Manejo de "Irse al Mazo" 

Gestionar cuando un equipo se retira de la ronda actual 
Otorgar puntos correspondientes al equipo contrario 
Persistencia del Estado del Juego 

Actualizar el estado después de cada acción significativa 
Asegurar que truco_pendiente_por_envido_primero y detalles del envido se persistan 
Manejo de Desconexiones y Reconexiones 

Marcar jugador como 'desconectado' si se detecta por WebSocket 
Continuar partida si es posible o pausarla 
Al reconectar, enviar estado actual completo del juego 
Fase 3: Integración con el Sistema de Salas y Frontend 

Modificación de salasRoute.js (Backend) 

Cuando una sala alcanza su max_jugadores: 
Cambiar estado de partida a 'en_curso' 
Instanciar la lógica del juego con los jugadores 
Iniciar el proceso (repartir cartas, determinar primer jugador) 
Notificar a los clientes que la partida ha comenzado 
Adaptación del Frontend 

SalasPage.tsx 

Cuando una sala se llena, redirigir a GamePage.tsx con el codigo_sala 
GamePage.tsx (nuevo o adaptado) 

Conectarse al WebSocket del backend al montar 
Solicitar estado actual del juego si es reconexión 
Eliminar lógica de estado y decisiones de IA del frontend 
Actualizar UI basada en mensajes del backend 
Enviar acciones al backend vía WebSocket 
Para "Envido Primero": 
Si hay un TRUCO en primera mano, mostrar opciones de ENVIDO también 
Para "Son Buenas": 
Al solicitar puntos de envido, ofrecer botón "Son Buenas" si aplica 
Implementar visualización para 2, 4 y 6 jugadores 
Actualización de GameCallbacks 

Las funciones interactuarán con WebSockets y base de datos en lugar de actualizar directamente la UI 
Fase 4: Pruebas y Refinamiento 

Pruebas Unitarias (Backend) 

Probar la lógica de los módulos de forma aislada 
Casos de prueba para diferentes secuencias de juego 
Casos específicos para: 
Secuencia "Envido Primero" 
Diferentes resultados del Envido interrumpido 
Resolución del Envido con "Son Buenas" 
Casos donde se intenta decir "son buenas" incorrectamente 
Pruebas para 2, 4 y 6 jugadores 
Pruebas de Integración (Backend) 

Probar interacción entre módulos de juego y base de datos 
Probar endpoints de API y comunicación WebSocket 
Pruebas End-to-End 

Simular múltiples clientes en partidas completas 
Probar escenarios de desconexión y reconexión 
Verificar correcta visualización y actualización de la UI 
Simular partidas con uso activo de "Envido Primero" y "Son Buenas" 
Refinamiento 

Optimizar comunicación WebSocket 
Mejorar manejo de errores y resiliencia 
Asegurar consistencia de datos entre backend, base de datos y clientes 
 